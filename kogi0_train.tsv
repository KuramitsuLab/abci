セットasetがセットaset2と互いに素か調べる	aset.isdisjoint(aset2)
カウンタaCounterとカウンタaCounter2の積集合	aCounter & aCounter2
xをx2で割った剰余	math.remainder(x, x2)
オプションで、データ操作の結果を反映させる	inplace = True
データフレームdfのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
s全体がパターンpatternにASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
リストiterableを累積する	itertools.accumulate(iterable, operator.mul)
s名を持ち、s2のプロパティを持った名前付きタプルを定義する	collections.namedtuple(s, s2)
sの先頭でパターンpatternにマッチさせる	re.match(pattern, s)
データフレームdfのカラムcolの日	df[col].dt.day
デックdeqの最大長	deq.maxlen
要素ひとつのりスト	[element]
グラフのの中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
ファイルfilenameをオープンする]	open(filename)
sをs2で二分し、、後半の文字列を使う	s.partition(s2)[-1]
日時dtををn月後に進める	dt + datetime.timedelta(months=n)
aとa2	a.index = a / 1
辞書adictと辞書adict2をチェーンする	collections.ChainMap(adict, adict2)
数式として、eの積分を求める	sympy.integrate(e)
データフレームdfのカラムcolがsで始まる行を抽出する	df[df[col].str.startswith(s)]
数式として、eを展開する	sympy.expand(e)
データフレームdfのカテゴリデータの要約統計量	df.describe(include='O')
データフレームdf中にある文字列valueの合計を数える	df.isin([value]).sum()
データフレームdfのカラムcol毎の合計	df.groupby(col).sum()
sのの中でASCII限定のパターンpatternにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
n年n2月n3日n4時n5分n6秒を日時に変換する	datetime.datetime(year=n, month=n2, day=n3, hour=n4, minite=n5, second=n6)
デックdeqの要素を左にn個分ローテートする	deq.rotate(-n)
青い破線グラフを描画する	plt.plot(xdata, ydata, linestyle='dashed', color='b')
標準出力のバッファをフラッシュする	sys.stdout.flush()
データフレームdfをJSONLファイルfilenameにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
折れ線グラフにポイントマーカーを使う	plt.plot(xdata, ydata, marker='.')
現在のタイムスタンプ	int(time.time())
エクセルファイルファイルfilenameから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
nをn2で割った余り	n % n2
日時dtにn分分、加算する	dt + datetime.timedelta(minutes=n)
{x2の符号を/xに}コピーする	math.copysign(x, x2)
データ列を使う	import pandas as pd
nが1、もしくは2か調べる	n == 1 or n == 2
2×3の空配列を作る	np.empty((2, 3))
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
整数nを二進文字列に変換する	bin(n)[2:]
データフレームdfのカラムcolの時	df[col].dt.hour
ベクトルの演算をする	import numpy as np
エンコーディング	sys.getdefaultencoding()
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
keyが辞書adictに存在するか調べる	key not in adict
リストxdataとリストydataについてアリスブルー色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='aliceblue')
標準出力を得る	sys.stdout
オブジェクトobjのイテレータ	iter(obj)
データフレームdfのインデックスがnの行を抽出する	df.loc[n]
数式として、方程e=0のzの解を求める	sympy.solve(e, z)
sを右トリムする	s.rstrip(s2)
sは全て識別子名か調べる	s.isidentifier()
セットasetの全ての要素がセットaset2に含まれるか調べる	aset.issubset(aset2)
デックdeqのn〜n2の部分要素	collections.deque(itertools.islice(deq, n, n2))
xの床	math.floor(x)
xの正弦の逆数	math.asin(x)
nからn2未満の間でn3ステップの整数群から整数乱数を生成する	random.randrange(n, n2, n3)
sのn番目より前にs2が含まれるか調べる	s.find(s2, end=n) != -1
数式として、zについてeを積分する	sympy.integrate(e, z)
TSVファイルfilenameをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
データフレームdfのカラムcolの秒	df[col].dt.second
アリスブルー色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='aliceblue')
nをn2乗に増やす	n **= n2
nが3の倍数か調べる	n % 3 == 0
データフレームdfの中央値	df.median()
n年n2月n3日n4時を日時に変換する	datetime.datetime(year=n, month=n2, day=n3, hour=n4)
リストiterableのテイルフィルタを作る	collections.deque(iterable, maxlen=n)
データフレームdfの歪度	df.kurt()
カウンタaCounterの正の数のみ残す	+aCounter
ケンドール相関係数でデータフレームdfの相関行列	df.corr(method='kendall')
sというサブディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), s))
qの分母	q.denominator
sの先頭	s[0]
データフレームdfの欠損値をxに設定する	df.fillna(x)
文字列elementが無限に繰り返すイテラブル	itertools.repeat(element)
ユーザから入力される	input()
fにxを文字列に変換して書き込む	f.write(str(x))
sを長さnで左寄せにする	s.ljust(n)
データフレームdfの欠損値を直後の値に設定する	df.fillna(method='bfill')
Pandasのバージョンを見る	print(pd.__version__)
データフレームdfからカテゴリデータのカラムを抽出する	df.select_dtypes('object')
オブジェクトobjが関数か調べる	callable(obj)
カウンタaCounterとカウンタaCounter2のユニオン	aCounter | aCounter2
データフレームdfのデータ型の一覧	df.dtypes
未定値	None
日時dtが日時dt2より前か調べる	dt < dt2
デックdeqの末尾	deq[-1]
nとn2の積	n * n2
sの小文字を英大文字に変換する	s.upper()
オブジェクトobjがオブジェクトobj2に等しいか調べる	obj == obj2
リストiterableを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
標準エラーを得る	sys.stderr
データフレームdfの重複した行のみを抽出する	df[df.duplicated(keep=False)]
nの二乗	n ** 2
xをx2で割って切り捨てる	x // x2
グラフの用途を論文に設定する	sns.set(context='paper')
ファイルfilenameのディレクトリ名	os.path.dirname(filename)
空の集合	set()
折れ線グラフのポイントマーカーを青くする	plt.plot(xdata, ydata, marker='.', markerfacecolor='b')
文字列elementがリストalistに含まれるか調べる	element in alist
nが一桁の正の数か調べる	0 <= n <= 9
文字列elementが辞書adictの値に含まれていないか調べる	element not in adict.values()
f全体を文字列として読み込む	f.read()
ポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.')
nの無限数列	itertools.repeat(n)
n個の集まりからn2個重複なく選ぶ方法	math.comb(n, n2)
データフレームdfのカラムcolをsにリネームする	df.rename(columns={col: s})
JSONを使う	import json
xの十の位で丸める	round(x, -1)
sをカンマで区切る	s.split(',')
セットasetからセットaset2の要素を全て取り除く	aset.difference_update(aset2)
xを印字できる文字列にする	ascii(x)
データフレームdfのカラムcolが何月か見る	df[col].dt.month
データ列dsの各データ値の出現数	ds.value_counts()
zがマイナス無限大に近づくときのeの極限値を求める	sympy.limit(e, z, -oo)
データフレームdfの欠損値を最小値で埋める	df.fillna(df.min())
データフレームdfから重複ありでランダムにn行を抽出する	df.sample(n, replace=True)
デックdeqに文字列elementをプッシュする	deq.append(element)
n年n2月n3日の日時	datetime.datetime(year=n, month=n2, day=n3)
ファイルfilenameからストリームをオープンして]、fileとする	file = open(filename)
リストxdataとリストydataの折れ線グラフに、青いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', markerfacecolor='b')
カウンタaCounterの全数	aCounter.total()
リストiterableのそれぞれを関数predicatefuncでフィルタする	map(func, iterable)
最大長nの両端キューを新しく作る	collections.deque(maxlen=n)
グラフ中の横軸の軸ラベルをsに設定する	plt.xlabel(s)
数式として、eのzをe2で置き換える	e.subs(z, e2)
データフレームdfの先頭n行	df.head(n)
破線グラフを描画する	plt.plot(xdata, ydata, linestyle='dashed')
sを空白で区切って文字列リストに変換する	s.split()
日時dtが何秒か知る	dt.second
x2に対するxの対数	math.log(x, x2)
エラーを出力する	sys.stderr
nまたはn2	n or n2
nの桁数	len(str(n))
数式として、sをシンボルに変換する	sympy.symbol(s)
selectorsでマスクされたリストiterableの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
データフレームdfをカラムcolによって降順に破壊的にソートする	df.sort_values(by=col, ascending=False, inplace=True)
xを切り上げて整数に変換する	math.ceil(x)
n個の整数列	list(range(n))
正規表現を使う	import re
sを隔離する	sys.intern(s)
数式として、eを数値に変換する	float(e)
リストxdataとリストydataの折れ線グラフに、黄色いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', markerfacecolor='y')
カウンタaCounterをリストに変換する	list(aCounter)
nが偶数か調べる	n % 2 == 0
ファイルfilenameとtextを結合する	os.path.join(filename, text)
日時dtにn年分、加算する	dt + datetime.timedelta(years=n)
sが全て英数字か調べる	s.isalnum()
xが整数か調べる	x.is_integer()
グラフで使える色の一覧	matplotlib.colors.cnames
nからn間隔で無限にカウントアップする	itertools.count(start=n, step=n2)
xの双曲線正接	math.tanh(x)
オプションで、出力先を標準出力に設定する	file = sys.stdout
xが一桁の正の数か調べる	0 <= x <= 9
オブジェクトobjの参照カウントを知る	sys.getrefcount(obj)-1
データ列dsの各データが何回出現するか見る	ds.value_counts()
カウンタaCounterをカウントが少ない順に列挙する	aCounter.most_common()[::-1]
NaN	math.nan
日時dtと日時dt2の時間差を秒数で求める	(dt - dt2).total_seconds()//60
データフレームdfのの中で、カラムcolとカラムcol2の重複を削除する	df.drop_duplicates(subset=col)
xの双曲線正弦	math.sinh(x)
fをクローズする	f.close()
x以上の最小の整数	math.ceil(x)
折れ線グラフの色をsに設定する	plt.plot(xdata, ydata, color=s)
s全体がパターンpatternにマッチするか見る	re.fullmatch(pattern, s)
リストalistをn倍する	alist * n
リストalistに応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=alist, cmap='Blues')
データフレームdfの数値をまとめて丸める	df.round()
グラフの見た目をデフォルトでいい感じに設定する	sns.set()
データフレームdfのカラムcolがsが含まれる行を抽出する	df[df[col].str.contains(s)]
リストiterableにリストiterable2を続ける	itertools.chain(iterable, iterable2)
s内のs2をn回だけs3に置き換える	s.replace(s2, s3, n)
sのn番目がs2で始まるか調べる	s.startswith(s2, n)
ファイルfilenameをオープンして]、読み込みストリームを使う	open(filename, mode='r')
リストxdataとリストydataの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
破線グラフの色をカラーコードrgbに設定する	plt.plot(xdata, ydata, linestyle='dashed', color=rgb)
データフレームdfのカラムcolを破壊的に削除する	df.drop(col, axis=1, inplace=True)
NaNも加えてxをダミー変数に変換する	pd.get_dummies(x, dummy_na=True)
ファイルfilenameの絶対パス	os.path.abspath(filename)
データフレームdfのカラムcolとデータフレームdf2のカラムcol2をキーにして結合する	pd.merge(df, df2, left_on=col, right_on=col2)
リストxdataについてのヒストグラムを描画する際に合計を1にする	plt.hist(xdata, density=True)
リストiterableとリストiterable2の全組み合わせ	list(itertools.product(iterable, iterable2))
辞書adictをコピーする	adict.copy()
日時dtのタイムゾーン	dt.timetz()
全ての８進数字	string.octdigits
データフレームdfのの中で、カラムcolとカラムcol2に重複があるか見る	df.duplicated(subset=[col1, col2])
整数nの二進文字列	bin(n)[2:]
セットaset∩セットaset2	aset.intersection(aset2)
リストiterableとリストiterable2をペアのリストにする	itertools.zip_longest(iterable, iterable2)
リストiterableの集合	set(iterable)
s内にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
xのx2乗してx3による余り	pow(x, x2, x3)
データフレームdfの欠損値を直後の値で埋める	df.fillna(method='bfill')
JSONLファイルfilenameを読み込む	pd.read_json(filename, orient='records', lines=True)
代数計算を使う	import sympy
セットaset⊇セットaset2	aset.issuperset(aset2)
データフレームdfの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
最大長をnにして両端キューを新しく作って、Xに代入する	X = collections.deque(maxlen=n)
データフレームdfの値をdictでまとめて置き換える	df.replace(adict)
日時dtが木曜日か調べる	dt.weekday() == 3
オブジェクトobjのtextプロパティを削除する	delattr(obj, text)
JSONファイルのファイル入力finを辞書に変換する	json.load(fin)
データ列dsを四分位数ごとにビン分割する	pd.qcut(ds, 4)
文字列elementがセットasetのメンバーでないか調べる	element not in aset
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
オプションで、標準出力を出力にする	file = sys.stdout
データフレームdfをJSONLファイルfilenameにインデックスを付けずに保存する	df.to_csv(filename, index=None)
sの末尾からs2を探す	s.rfind(s2)
sの全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
xが有限か調べる	math.isfinite(x)
リストalistを引数として展開して表示する	print(*alist, sep=',')
sとs2を英大文字英小文字を無視して比較する	s.casefold() == s2.casefold()
カウンタaCounterから0以下のカウントを取り除く	+aCounter
エクセルファイルファイルfilenameから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
データフレームdfのカラムcolがsで終わる行を抽出する	df[df[col].str.endswith(s)]
sがリストalist内のいづれか調べる	s in alist
qの分子	q.numerator
x2をxとする	x = x2
sは全て数値か調べる	s.isnumeric()
データフレームdfを丸めて、整数型にする	df.round().astype(int)
文字列elementの出力を改行なしに行う	print(s, end='')
オプションで、昇順にする	ascending = True
二次元リストalistをフラット化する	sum(alist)
x以下の最大の整数	math.floor(x)
リストxdataとリストydataの折れ線グラフに、線幅nのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', markeredgewidth=n)
現在の最大の再帰数	sys.getrecursionlimit()
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
sの右側から空白を取り除く	s.rstrip()
全ての空白文字	string.whitespace
データフレームdfの相関行列	df.corr()
辞書adictからkeyの値か、もしくは文字列elementを得る	adict.get(key, element)
データフレームdfのカラムcolの曜日が何日目か見る	df[col].dt.dayofweek
折れ線グラフのポイントマーカーを緑色に設定する	plt.plot(xdata, ydata, marker='.', markerfacecolor='g')
折れ線グラフのポイントマーカーの大きさをnに設定する	plt.plot(xdata, ydata, marker='.', markersize=n)
リストalistの末尾を取り除く	alist[:-1]
数式として、eを積分する	sympy.integrate(e)
データフレームdfの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
関数predicatefuncが真とならないリストiterableの要素	itertools.dropwhile(predicatefunc, iterable)
最大長をnにして両端キューを新しく作る	collections.deque(maxlen=n)
オプションで、バッファリングを無効にする	buffering = 0
データフレームdfのカラムcol、カラムcol2、カラムcol3を抽出する	df[[col, col2, col3]]
デックdeqをリストに変換する	list(deq)
s中のASCII限定のパターンpatternよって置き換える	re.sub(pattern, repl, s, flags=re.ASCI)
xを切り下げる	math.floor(x)
セットasetの浅いコピー	aset.copy()
オブジェクトobjは整数クラスか調べる	isinstance(obj, int)
グラフの背景色を暗くする	sns.set(style='darkgrid')
リストxdataを縦軸、リストydataを横軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
オプションで、インデックスを自動的な連番に設定する	index_col = None
数式として、eのzを微分する	sympy.diff(e, z)
nとn2の排他的論理和	n ^ n2
セットasetをタプルに変換する	tuple(aset)
データフレームdfをJSONLファイルfilenameに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
n個のものからn2個取り出したときの並べ方の総数	math.perm(n, n2)
データフレームdfをカラムcolによってソートして、更新する	df.sort_values(by=col, inplace=True)
n年n2月の日時	datetime.datetime(year=n, month=n2, day=1)
名前付きタプルオブジェクトobjのフィールド名の一覧	"if isinstance(obj, NamedTuple):
    obj._fields"
xとx2から成る複素数	complex(x, x2)
ユーザの入力を読み取る	input()
データフレームdfをカラムcolとカラムcol2の組み合わせ毎にグループ化して、列挙する	[(name, group) for name, group in df.groupby([col, col2])]
リストxdataの変化を折れ線グラフで描画する	plt.plot(range(len(xdata)), xdata)
リストalistのn番目の要素を削除する	del alist[n]
グラフ中のタイトルをsに設定する	plt.title(s)
エクセルファイルファイルfilenameのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームdfから重複した行を削除する	df.drop_duplicates()
xの符号をx2と同じにする	math.copysign(x, x2)
データフレームdf中に文字列valueと文字列value2があるか調べる	df.isin([value, value2])
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
データフレームdfをカラムcol毎にグループ化して、列挙する	[(name, group) for name, group in df.groupby(col)]
xとx2の両方ともnとする	x = x2 = n
nにn2をかける	n * n2
TSVファイルfilenameを読み込む	pd.read_csv(filename, sep='\t')
xが真か調べる	bool(x)
sがs2で終わるか調べる	s.endswith(s2)
1からnまでの整数列	list(range(1, n+1))
ハローワールドと表示する	print('Hello World')
数式として、zについてeの積分を求める	sympy.integrate(e, z)
日時dtからn時間分、減算する	dt - datetime.timedelta(hours=n)
事前にASCII限定としてパターンpatternをコンパイルする	re.compile(pattern, flag=re.ASCI)
リストalistの重複を取り除く	sorted(set(alist), key=alist.index)
プログラムの実行を強制的に終了する	sys.exit()
データ列dsをビン分割する	pd.cut(ds, alist)
xの正接	math.tan(x)
破線グラフの色を赤にする	plt.plot(xdata, ydata, linestyle='dashed', color=rgb)
データフレームdfからランダムに抽出する	df.sample()
リストxdataとリストydataについての散布図に黒いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
セットasetが空か調べる	len(aset) == 0
sをUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
リストxdataとリストydataを折れ線グラフで描画する	plt.plot(xdata, ydata)
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
日時dtの曜日を整数で使う	dt.weekday()
データフレームdfの欠損値を平均値に設定する	df.fillna(df.mean())
コマンドの一覧を得る	sys.argv[1:]
n年n2月n3日を日付に変換する	datetime.date(year=n, month=n2, day=n3)
セットasetとセットaset2に共通する要素からなる集合	aset.intersection(aset2)
sを走査し、パターンpatternにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
無限にカウントアップする	itertools.count()
オブジェクトobjがオブジェクトobj2と同一オブジェクトか調べる	obj is obj2
要素数5の空配列を作る	np.empty(5)
セットaset⊂セットaset2	aset < aset2
データフレームdfのカラムcolをカテゴリデータに変換する	df[col].astype(object)
リストalistの平均値	sum(alist)/len(alist)
リストiterableの全順列	itertools.permutations(iterable)
データ列dsをビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ファイルfilenameを読み込みできるようにオープンする]	open(filename, mode='r')
リストxdataとリストydataの破線グラフを描画して、その色をカラーコードrgbに設定する	plt.plot(xdata, ydata, linestyle='dashed', color=rgb)
無限大	math.inf
スクリプトファイルと同じディレクトリのファイルfilenameのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filename)
xが正の数か調べる	x > 0
辞書adictのキーと値を入れ替える	{v: k for k, v in adict.items()}
オプションで、UTF8を使う	encoding = 'utf-8'
辞書adictにキーワード引数kwargsを追加更新する	adict.update(**kwargs)
データフレームdfのカラムcolがxより小さい行を抽出する	df[df[col] < x]
sからs2のパターンで日付に変換する	datetime.date.strptime(s, s2)
sが全て数字か調べる	s.isdigit()
デックdeqの要素を右にn個分ローテートする	deq.rotate(n)
n進sをバイト列に変換する	int(s, n2).to_bytes(length=n2, byteorder='big')
データフレームdfのカラムcolをヒストグラムで描画する	plt.hist(df[col])
2を底とするxの対数	math.log2(x)
デックdeq中の文字列elementの数を数える	deq.count(element)
オブジェクトobjは数値か調べる	isinstance(obj, (int,float))
s全体をパターンpatternにマッチさせる	re.fullmatch(pattern, s)
乱数シードを初期化する	random.seed()
プログラムの実行を異常終了する	sys.exit(1)
オプションで、改行しないように設定する	end = ''
折れ線グラフのマーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
全ての句読点文字	string.punctuation
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
リストxdataとリストydataの破線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dashed', linewidth=n)
リストxdataをnからn2の範囲でヒストグラムにする	plt.hist(xdata, range=(n, n2))
赤いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
n年n2月n3日n4時n5分の日時	datetime.datetime(year=n, month=n2, day=n3, hour=n4, minite=n5)
日時dtををn週間後に進める	dt + datetime.timedelta(weeks=n)
二進sをバイト列に変換する	int(s, 2).to_bytes(length=2, byteorder='big')
疑似乱数を生成する	random.random()
リストxdataとリストydataについて破線グラフを描画して、その色をアリスブルーに設定する	plt.plot(xdata, ydata, linestyle='dash', color='aliceblue')
データフレームdfのカラムcolがリストalistに含まれる行を抽出する	df[df[col].isin(alist)]
sからs2を全て取り除く	s.replace(s2, '')
アリスブルー色の折れ線グラフを描画する	plt.plot(xdata, ydata, color='aliceblue')
データフレームdfをカラムcolによってソートして、NaNを先頭にする	df.sort_values(by=col, na_position='first')
データフレームdfをカラムcolによって昇順にソートする	df.sort_values(by=col, ascending=True)
3×3の単位行列を作る	np.eye(3)
sが全てアルファベットか調べる	s.isalpha()
リストxdataとリストydataの折れ線グラフを描画して、破線に設定する	plt.plot(xdata, ydata, linestyle='dashed')
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
カウンタaCounterのそれぞれの項目を、そのカウント回数	aCounter.elements()
全ての大文字	string.ascii_uppercase
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
表データをインポートする	import pandas as pd
リストxdataとリストydataについてのヒストグラムをふたつ並べて描画する	plt.hist([xdata, ydata], color=['b', 'r'])
sの両端からs2を取り除く	s.strip(s2)
リストiterableをイミュータブルな集合に変換する	frozenset(iterable)
日時dtの秒数	dt.second
xを整数型に変換する	int(x)
リストxdataとリストydataの折れ線グラフに、緑色のポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', markerfacecolor='g')
s中にs2が含まれないか調べる	s2 not in s
データフレームdf中のカラムcolとカラムcol2に重複があれば、削除する	df.drop_duplicates(subset=[col, col2])
xの小数点以下を丸める	round(x)
sは全て十進数字か調べる	s.isdecimal()
データフレームdfの欠損値をxで埋める	df.fillna(x)
sのn番目とn2番目の間にs2が含まれるか調べる	s.find(s2, start=n, end=n2) != -1
データフレームdfのカラムcolとカラムcol2毎の合計	df.groupby([col, col2], as_index=False).sum()
オブジェクトobjがtextプロパティを持つか調べる	hasattr(obj, text)
データフレームdfのカラムcolがsが含まれない行を抽出する	df[not df[col].str.contains(s)]
データフレームdfを10の位で丸めて、整数型にする	df.round(-1).astype(int)
xの絶対値	math.fabs(x)
データフレームdfを1000の位で丸める	df.round(-3)
nをn2分の一にする	n /= n2
カウンタaCounterの項目数	len(aCounter)
オブジェクトobjがsという名前のプロパティを持つか調べる	hasattr(obj, s)
0からnの範囲	range(n)
オブジェクトobjにtextプロパティが存在するか調べる	hasattr(obj, text)
名前付きタプルオブジェクトobjを辞書に変換する	obj._asdict()  # isinstance(obj, NamedTuple)
データフレームdfをカラムcol毎にグループ化して、sというグループの個数を求める	df.groupby(col).size()[s]
リストalistとリストalist2から辞書	dict(zip(alist, alist2))
データフレームdfの欠損値を中央値に設定する	df.fillna(df.median())
nを半分にする	n /= 2
nがn2よりも大きいか調べる	n > n2
表データを使う	import pandas as pd
オブジェクトobjのオブジェクト識別子	id(obj)
xの逆双曲線正弦	math.asinh(x)
変数名をキーとして、辞書	dict(name=element)
リストxdataとリストydataの折れ線グラフを描画して、透明度をxに設定する	plt.plot(xdata, ydata, alpha=x)
dfのcolがxの行を抽出する	df[df[col] == x]
keyが辞書adictに存在するか調べる	key in adict
nをn2で割った余りをnに代入する	n %= n2
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
xの余弦の逆数	math.acos(x)
データフレームdfからランダムにn行を抽出する	df.sample(n)
リストiterableをクラスCのインスタンスに変換する	C._make(iterable)  # issubclass(C, tuple)
ファイルfilenameをディレクトリ名とファイル名に分割する	os.path.split(filename)
x,x2,x3をそれぞれn,n2,n3とする	x, x2, x3 = n, n2, n3
nにn2をかけた値をnに代入する	n *= n2
データフレームdfのカラムcolに重複があれば、マスクする	df.duplicated(subset=col)
s中のパターンpatternによる全てのマッチを使う	re.findall(pattern, s)
全ての小文字	string.ascii_lowercase
リストalistの末尾からn番目以前の部分を取り出す	alist[:-n]
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
f全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
セットasetのイミュータブル版	frozenset(aset)
ファイルfilenameからの入力ストリームを使う	open(filename)
リストalistの要素をソートする	sorted(alist)
nをn2倍にする	n *= n2
TSVファイルfilenameを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
日時dtにn週間分、加算する	dt + datetime.timedelta(weeks=n)
データフレームdfの分散	df.var()
nがn2より小さいか調べる	n < n2
データフレームdfからn個、サンプリングする	df.sample(n)
xとx2の商と余りをペアで使う	divmod(x, x2)
AとBの二重ループを単ループにする	"for x, y in itertools.product(iterable, iterable2):
    pass"
リストxdataとリストydataの折れ線グラフを描画して、sとラベル付けする	plt.plot(xdata, ydata, label=s)
nが2で割り切れるか調べる	n % 2 == 0
データ列を使う	from sympy import substitution
sからs2のパターンで日時に変換する	datetime.datetime.strptime(s, s2)
0から始まる無限数列	itertools.count()
関数predicatefuncが真となるリストiterableの要素	itertools.takewhile(predicatefunc, iterable)
折れ線グラフのポイントマーカーを黄色くする	plt.plot(xdata, ydata, marker='.', markerfacecolor='y')
xからx2の間の一様な疑似乱数を生成する	random.uniform(x, x2)
標準エラーを使う	sys.stderr
オブジェクトobjのメモリビュー	memoryview(obj)
nがn2の倍数でないか調べる	n % n2 != 0
何回まで再帰ができるか知る	sys.getrecursionlimit()
書式textをリストalistを引数としてフォーマットする	text.format(*alist)
データフレームdfの最頻値	df.mode()
最大の再帰数をnに設定する	sys.setrecursionlimit(n)
リストalistの先頭を取り除く	alist[1:]
xの二進対数	math.log2(x)
sのの中でASCII限定のパターンpatternにマッチした文字列をreplで置き換える	re.sub(pattern, repl, s, flags=re.ASCI)
セットasetがセットaset2の真部分集合か調べる	aset < aset2
nからn2までの整数列	list(range(n, n2+1))
n個の数値イテラブル	range(n)
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
データフレームdfから重複を残さず、削除する	df.drop_duplicates(keep=False)
イテレータAとBを連続して繰り返す	for X in itertools.chain(A, B):
破線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dashed', linewidth=n)
{リストalistを/ひとつ置きに}取り出す	alist[::2]
グラフにグリッド線を入れる	plt.grid(True)
デックdeq中の文字列elementのインデックス	deq.index(element)
xの自然対数	math.log(x)
日時dtをn分前に戻す	dt - datetime.timedelta(minutes=n)
ファイルfilenameの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filename))[0]
sの左側から空白を取り除く	s.lstrip()
xの逆双曲線余弦	math.acosh(x)
辞書adictのキーの一覧	adict.keys()
データフレームdfのカラムcol2を型tyに変換し、カラムcolに代入する	df[col] = df[col2].astype(ty)
nとn2の商	n / n2
空白	' '
日時dtが何月か知る	dt.month
nがn2で割り切れないか調べる	n % n2 != 0
カウンタaCounterにリストiterableを追加する	aCounter.update(iterable)
日時dtをn秒前に戻す	dt - datetime.timedelta(seconds=n)
文字コードnを文字に変換する	chr(n)
デックdeqをポップする	deq.pop()
nからn2の値を引いてnに代入する	n -= n2
データフレームdf中にいくつ文字列valueがあるか数える	df.isin([value]).sum()
デックdeqに文字列elementをエンキューする	deq.appendleft(element)
リストiterableからn個、サンプリングする	random.sample(iterable, k=n)
n年n2月n3日n4時n5分を日時に変換する	datetime.datetime(year=n, month=n2, day=n3, hour=n4, minite=n5)
リストiterableを両端キューに変換する	collections.deque(iterable)
グラフ中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
sが全て英小文字か調べる	s.islower()
リストxdataとリストydataの折れ線グラフを透明度xで描画する	plt.plot(xdata, ydata, alpha=x)
sを全て英大文字に変換する	s.upper()
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
s2の文字コード	ord(s2)
破線グラフの色を青にする	plt.plot(xdata, ydata, linestyle='dashed', color='b')
改行する	print()
n年の日付	datetime.date(year=n, month=1, day=1)
リストalistをタプルに変換する	tuple(alist)
リストxdataをアリスブルー色のヒストグラムで描画する	plt.hist(xdata, color='aliceblue')
データフレームdfの行と列を入れ替える	df.T
s内にひとつでも英大文字が含まれるか調べる	any(c.isupper() for c in s)
sが全てアスキー文字か調べる	s.isascii()
最初のプログラムを書く	print('Hello World')
リストalistの要素を逆順にする	alist[::-1]
データフレームdf中にある文字列valueと文字列value2の合計を数える	df.isin([value, value2]).sum()
nを切り捨てながらn2分の一にする	n //= n2
x、x2、x3の最小値	min(x, x2, x3)
sをカンマで分割し、文字列リストに変換する	s.split(',')
データフレームdfの先頭	df.head()
JSON形式のbを辞書に変換する	json.loads(b.decode('unicode-escape'))
日時dtをn時間前に戻す	dt - datetime.timedelta(hours=n)
データフレームdfから型tyのカラムの名前の一覧	df.select_dtypes(ty).columns
データフレームdfのカラムcolを抽出する	df[col]
標準入力から1文字だけ読む	sys.stdin.read(1)
デックdeqのn番目	deq[n]
データフレームdfとデータフレームdf2を横方向にマージする	pd.merge(df, df2)
ピアソン相関係数でデータフレームdfの相関行列	df.corr(method='pearson')
セットasetが空でないか調べる	len(aset) != 0
JSONファイルのfをデータに変換する	json.load(fin)
データフレームdfのカラムcolがxの行を抽出する	df[df[col] == x]
リストiterableとリストiterable2の全組み合わせを繰り返す	"for x, y in itertools.product(iterable, iterable2):
    pass"
日時dtをタイムスタンプに変換する	dt.timestamp()
赤い破線グラフを描画する	plt.plot(xdata, ydata, linestyle='dashed', color='r')
データフレームdfの末尾n行を抽出する	df.tail(n)
データフレームdfのカラムcolをダミー変数に変換する	pd.get_dummies(df[col])
数式として、eの部分分数化を行う	sympy.apart(e)
nの各桁の総和	sum(map(int, str(n)))
データフレームdfのカラムcolをリストとして抽出する	df[col].values.tolist()
nの各桁の総和	sum(map(int, str(n)))
sを全て英小文字に変換する	s.lower()
リストxdataとリストydataの破線グラフを描画する	plt.plot(xdata, ydata, linestyle='dashed')
カウンタaCounterを低頻出順に列挙する	aCounter.most_common()[::-1]
nとn2の最大公約数	math.gcd(n, n2)
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
折れ線グラフを破線に設定する	plt.plot(xdata, ydata, linestyle='dashed')
カウンタaCounterを上位n個カウントが多い順に列挙する	aCounter.most_common(n)
nがn2以上か調べる	n >= n2
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
nかけるn2	n * n2
xの余弦	math.cos(x)
sを長さnで右寄せにする	s.rjust(n)
n年を日付に変換する	datetime.date(year=n, month=1, day=1)
ビン数をnに設定してリストxdataのヒストグラムを描画する	plt.hist(xdata, bins=n)
散布図にカラーコードrgbのポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c=rgb)
データフレームdfの欠損値を中央値で埋める	df.fillna(df.median())
辞書adictの値の一覧	adict.values()
ファイルfilenameのファイル名	os.path.basename(filename)
整数nのバイト長	(n.bit_length() + 7) // 8
x,x2の複素数	complex(x, x2)
文字列elementがセットasetに含まれるか調べる	element in aset
セットasetに含まれ、セットaset2に含まれない集合	aset.difference(aset2)
数式として、eを数値計算する	float(e)
データフレームdfの尖度	df.skew()
xが-9以上、9以下か調べる	-9 <= x <= 9
システム時刻で乱数を初期化する	random.seed()
sのnからn2までの間でs2を探す	s.find(s2, start=n, end=n2)
文字列elementがn回繰り返すイテラブル	itertools.repeat(element, n)
リストalist中の最小値	min(alist)
空のカウンタを新しく作って、Xに代入する	X = collections.Counter()
cに辞書adictを追加する	aCounter.update(adict)
数式として、連立方程e=0,e2の解を求める	sympy.solve([e, e2])
整数nをゼロパディングでn2桁の文字列に変換する	str(n).zfill(n2)
オブジェクトobjのクラス	type(obj)
カウンタaCounter内の文字列element項目のカウント	aCounter[element]
日時dtが金曜日か調べる	dt.weekday() == 4
再帰エラーを防ぐために、上限をnに設定する	sys.setrecursionlimit(n)
グラフを綺麗にする	import seaborn as sns
ファイルfilenameの拡張子	os.path.splitext(filename)[1].lstrip('.')
nマイナスn2	n - n2
Pandasで、データフレームdfのカラムcolを日付データに変換し、データフレームdfのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
オプションで、バッファリングのサイズをnに設定する	buffering = n
リストiterableを累加する	itertools.accumulate(iterable)
xはx2である	x = x2
セットasetとセットaset2が互いに素か調べる	aset.isdisjoint(aset2)
計算機イプシロン	sys.float_info.epsilon
リストalistをイミュータブルにする	tuple(alist)
リストxdataとリストydataについての散布図をアリスブルー色で描画する	plt.plot(xdata, ydata, c='aliceblue')
セットasetから全ての要素を取り除く	aset.clear()
sに日本語が含まれるか調べる	re.search('[あ-んア-ン一-鿐]', s)
nとn2の論理積	n & n2
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
sをs2で二分する	s.partition(s2)
空列	[]
sをキャピタライズする	s.capitalize()
sが漢字か調べる	('一' <= s <= '鿐')
オプションで、欠損値を先頭にする	na_position = 'first'
オプションで、エンコーディングエラーがあるとき、例外を発生させるように設定する	errors = 'strict'
データ列dsのユニークな値の個数	ds.nunique()
sの先頭でASCII限定としてパターンpatternにマッチさせる	re.match(pattern, s, flags=re.ASCI)
sの接頭辞からs2を取り除く	s.removeprefix(s2)
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
オプションで、ヘッダをnamesに設定する	header = names
日時dtが何年か知る	dt.year
TYPE2=Person;$$クラスがTYPE2=Person;$$2クラスのサブクラスか調べる	issubclass(TYPE, TYPE2)
データフレームdfのカラムcolを削除する	df.drop(col, axis=1)
TSVファイルfilenameをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
textとtext2をファイルパスとして結合する	os.path.join(text, text2)
折れ線グラフの色をアリスブルーに設定する	plt.plot(xdata, ydata, color='aliceblue')
空文字	''
ファイル名filenameがCSVファイルか調べる	filename.endswith('.csv')
データフレームdfをカラムcolによって昇順に破壊的にソートする	df.sort_values(by=col, ascending=True, inplace=True)
リストiterableを2回あわせた直積	itertools.product(iterable, repeat=2)
データフレームdfを欠損値を含めてカラムcol毎にグループ化する	df.groupby(col, dropna=False)
データフレームdfからリストalistで指定されたデータ型のカラムを除外する	df.select_dtypes(exclude=alist)
整数nがリストalistのどれかか調べる	n in alist
sをエンコーディングnameでバイト列に変換する	s.encode(encoding=name)
カラーバーを描画する	plt.colorbar()
TSVファイルfilenameからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
日時dtの年数	dt.year
データフレームdfの数値をまとめて小数点以下n桁で丸めて、インプレイスする	df.round(n, inplace=True)
JSON形式のsをデータに変換する	json.loads(b.decode('unicode-escape'))
JSON形式のsを読み込む	json.loads(s)
データフレームdfのカラム一覧	df.info()
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
リストalistにリストalist2を追加して拡張する	alist.extend(alist2)
グラフ中のフォントをsに設定する	sns.set(font=s)
ssを連結する	''.join(ss)
標準入力を使う	sys.stdin
n年n2月n3日の日付	datetime.date(year=n, month=n2, day=n3)
データフレームdfのカラムcolがxでない行をフィルタする	df[df[col] == x]
リストalistの末尾から要素をポップする	alist.pop()
データフレームdfのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
データフレームdfのカラムcolをリストに変換する	df[col].values.tolist()
タプルatupleをミュータブルにする	list(atuple)
n年を日時に変換する	datetime.datetime(year=n, month=1, day=1)
sをユニコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
dfのcolがxでない行をフィルタする	df[df[col] == x]
日時dtをsでフォーマットして文字列に変換する	dt.strftime()
データフレームdfからリストalistで指定されたデータ型のカラムを抽出する	df.select_dtypes(include=alist)
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
データフレームdfの欠損値を平均値で埋める	df.fillna(df.mean())
空のチェーンマップを作成する	collections.ChainMap()
空行を表示する	print()
オブジェクトobjのtextプロパティの値	getattr(obj, text)
オプションで、読み込まない列番号をnamesで指定する	skiprows = names
xの平方根	math.sqrt(x)
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
カラーバーを付ける	plt.colorbar()
データフレームdfのカラムcolが正規表現sにマッチしない行を抽出する	df[not df[col].str.match(s)]
nをn2で整数除算する	n // n2
リストxdataとリストydataの折れ線グラフをsの色で描画する	plt.plot(xdata, ydata, color=s)
ファイルfilenameをベース名と拡張子に分割する	os.path.splitext(filename)
osモジュールをインポートする	import os
データフレームdfの空文字をドロップする	df.replace('', np.nan).dropna()
偽	False
xの複素数	complex(x)
データフレームdfのn行以降を抽出する	df[n:]
データフレームdfのカラムcolの文字列長を列として使う	df[col].str.len()
UNIXコマンドtextを実行する	os.system(text)
sを改行で分割し、文字列リストに変換する	s.splitlines()
ヒストグラムの透明度をxに設定する	plt.hist(xdata, alpha=x)
Pandasで、データフレームdfのカラムcolをインデックスにする	df.set_index(col, inplace=True)
オプションで、先頭のカラムをインデックスに設定する	index_col = 0
リストxdataとリストydataについて散布図を描画する	plt.scatter(xdata, ydata)
スクリプト名を得る	sys.argv[0]
データフレームdfの母標準偏差	df.std(ddof=0)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
sを長さnでセンタリングにする	s.center(n)
TSVファイルfilenameからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームdfの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
デックdeqの先頭にリストiterableの各要素を追加する	deq.extendleft(iterable)
データフレームdfの値を正規表現patternでまとめてsに置き換える	df.replace(pattern, s, regex=True)
セットasetとaaset2のいずれか一方だけの集合	aset.symmetric_difference(aset2)
データフレームdfのカラムcolがsで終わらない行を抽出する	df[not df[col].str.endswith(s)]
日時dtにn秒分、加算する	dt + datetime.timedelta(seconds=n)
xの逆正弦	math.asin(x)
数式として、eの平方根を求める	sympy.sqrt(e)
空のタプル	()
コマンド引数を一案として得る	sys.argv[1:]
破線グラフの色を黒にする	plt.plot(xdata, ydata, linestyle='dashed', color='k')
xからx2を引く	x - x2
Pandasで、エポック秒のデータフレームdfのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
リストalistの末尾のn要素を取り除く	alist[:-n]
綺麗なグラフを描画する	import seaborn as sns
データフレームdfをJSONLファイルfilenameに保存する	df.to_excel(filename)
空の辞書	{}
既存のファイルfilenameをUTF8で追加できるようにオープンする]	open(filename, mode='a', encoding='utf-8')
sのn番目以降にs2が含まれないか調べる	s.find(s2, start=n) == -1
データフレームdfのカラムcolとデータフレームdf2のカラムcol2をキーにして外部結合する	pd.merge(df, df2, left_on=col, right_on=col2, how='outer')
sを空白で区切って整数リストに変換する	map(int, s.split())
sにおいてs2をs3に全て置き換える	s.replace(s2, s3)
0からnまでのスライス	slice(n)
データフレームdfの数値をまとめて小数点以下n桁で丸める	df.round(n)
x2を底とするxの対数	math.log(x, x2)
リストalistをランダムにシャッフルする	random.shuffle(alist)
xのラジアン	math.radians(x)
データフレームdfのカラムcolをインデックスに設定する	df.set_index(col)
エクセルファイルファイルfilenameからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
n年n2月を日付に変換する	datetime.date(year=n, month=n2, day=1)
リストxdataとリストydataの折れ線グラフを描画して、その色をカラーコードrgbに設定する	plt.plot(xdata, ydata, color=rgb)
xのx2乗	x ** x2
文字列elementがセットasetのメンバーか調べる	element in aset
sを文字リストに変換する	list(s)
データフレームdfのカラムcolの月	df[col].dt.month
日時dtををn分後に進める	dt + datetime.timedelta(minutes=n)
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
データフレームdfのカラムcolの曜日数	df[col].dt.dayofweek
nとn2の値を足してnに代入する	n += n2
データフレームdfのの中で、カラムcolの重複を見る	df.duplicated(subset=col)
現在のミリ秒	int(time.time() * 1000)
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
n個からn2個取り出したときの順列の総数	math.perm(n, n2)
xを論理値に変換する	bool(x)
十六進sを整数に変換する	int(s, 16)
オプションで、読み込まないフッタをnに設定する	skipfooter = n
日時dtをsでフォーマットする	dt.strftime()
nがn2より大きいか調べる	n > n2
データフレームdfをエクセルファイルファイルでJSONLファイルfilenameに保存する	df.to_excel(filename)
Pandasで、フォーマットfmtでデータフレームdfのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
リストxdataとリストydataの破線グラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='dashed', color='k')
セットasetをセットaset2との共通要素だけに更新する	aset.intersection_update(aset2)
データフレームdfのの中で何行、重複するか見る	df.duplicated().sum()
リストalistの先頭	alist[0]
辞書adictからkeyの値をエラーなく得る	adict.get(key, None)
xはx2に近いか調べる	math.isclose(x, x2)
nとn2の和	n + n2
データフレームdfをカラムcolによって破壊的にソートする	df.sort_values(by=col, inplace=True)
データフレームdfをタブ区切りでJSONLファイルfilenameに保存する	df.to_csv(filename, sep='\t')
Pandasで、xを日付データに変換する	pd.to_datetime(x)
sのn番目より前にs2が含まれないか調べる	s.find(s2, end=n) == -1
セットasetから文字列elementを取り除く	aset.remove(element)
nを切り捨てながら半分にする	n //= 2
sを最後のs2で分けたときの前半の文字列	s.rpartition(s2)[0]
辞書adictからkeyを取り除く	adict.pop(key)
セットaset＼セットaset2	aset.difference(aset2)
リストalistを反転する	reversed(alist)
文字列elementと文字列element2をカンマで区切って表示する	print(element, element2, sep=',')
sが片仮名か調べる	('ァ' <= s <= 'ン')
データフレームdfのカラムcolが何秒か見る	df[col].dt.second
データフレームdfをJSONLファイルfilenameにヘッダを付けずに保存する	df.to_csv(filename, header=None)
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
xをx2で整数除算する	x // x2
コマンドのn番目の引数を得る	sys.argv[n]
標準出力を使う	sys.stdout
セットasetをリストに変換する	list(aset)
データフレームdfのn行目を削除する	df.drop(n, axis=0)
リストxdataを縦軸、リストydataを横軸として、散布図を描画する	plt.scatter(xdata, ydata)
sのn番目	s[n]
分母の最大値を指定して近似したい	q.limit_denominator(max_denominator=1000000)
リストxdataとリストydataの折れ線グラフに、大きさnのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', markersize=n)
データフレームdf中に文字列valueがあるか調べる	df.isin([value])
アヤメのデータセットをロードする	sns.load_dataset('iris')
黒いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='k')
データフレームdfの第三四分位数	df.quantile(0.75)
リストiterableからカウンタを新規に作って、Xに代入する	X = collections.Counter(iterable)
カウンタaCounter∪カウンタaCounter2	aCounter | aCounter2
ビン数nのヒストグラムをリストxdataについて描画する	plt.hist(xdata, bins=n)
sが平仮名か調べる	('ぁ' <= s <= 'ん')
セットasetとセットaset2の積集合	aset.intersection(aset2)
オプションで、namesをカラムの名前に設定する	names = names
日時dtからn秒分、減算する	dt - datetime.timedelta(seconds=n)
リストalist内の要素が少なくともひとつ真か調べる	any(alist)
データフレームdfをTSVファイルでJSONLファイルfilenameに保存する	df.to_csv(filename, sep='\t')
xの絶対値	abs(x)
リストxdataとリストydataについて散布図を描画して、ポイントマーカーの色をカラーコードrgbに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
n年n2月n3日を日時に変換する	datetime.datetime(year=n, month=n2, day=n3)
CSVファイルfilenameからデータフレームを読み込む	pd.read_csv(filename, sep=',')
デックdeqの大きさ	len(deq)
辞書adictからkeyの値	adict.get(key)
リストiterableを無限に繰り返す	itertools.cycle(iterable)
日時dtが何曜日か知る	dt.weekday()
Pythonパスにsを追加する	sys.path.append(s)
リストalistを逆順にする	alist[::-1]
デックdeqが空でないか調べる	len(deq) != 0
データフレームdfの欠損値を直前の値に設定する	df.fillna(method='ffill')
xの常用対数	math.log10(x)
整数nを半分にする	n //= 2
データフレームdfをインデックスによって降順でソートする	df.sort_index(ascending=False)
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
辞書adictに文字列elementをkeyとして加える	adict[key] = element
データフレームdf中の欠損値の合計を数える	df.isna().sum()
オブジェクトobjがPerson;$$クラスか調べる	isinstance(obj, TYPE)
nが5の倍数か調べる	n % 5 == 0
sの先頭だけ英大文字化する	s.capitalize()
コマンド引数のn番目を得る	sys.argv[n]
sを最後のs2で二分する	s.rpartition(s2)
データ列をインポートする	import pandas as pd
リストxdataとリストydataについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
グラフのカラーパレットをsで指定する	sns.set(pallete=s)
ヒストグラムを使ってデータフレームdfのカラムcolを描画する	plt.hist(df[col])
日時dtが土曜日か調べる	dt.weekday() == 5
numpyを使う	import numpy as np
折れ線グラフのポイントマーカーの線幅をnに設定する	plt.plot(xdata, ydata, marker='.', markeredgewidth=n)
xが負の数か調べる	x < 0
リストiterableをカンマ区切りで連結する	','.join(map(str, iterable))
グラフの背景色を暗くする	sns.set(style='darkgrid')
表データをインポートする	import pandas as pd
xとx2から成るペア	(x, x2)
eのx乗	math.exp(x)
日時dtが日時dt2と同時か調べる	dt == dt2
データフレームdfの先頭n行	df.head(n)
データ列dsをリストalistを境界値としてビン分割する	pd.cut(ds, alist)
xの逆余弦	math.acos(x)
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
数式として、eを簡略にする	sympy.sympify(e)
xとx2の値をスワップする	x, x2 = x2, x
データフレームdfを丸める	df.round()
リストxdataとリストydataの破線グラフを描画して、その色を赤にする	plt.plot(xdata, ydata, linestyle='dashed', color='r')
s全体をASCII限定としてパターンpatternにマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
xの正弦	math.sin(x)
ファイルfilenameを絶対パスに変換する	os.path.abspath(filename)
オプションで、ヘッダを自動的な連番に設定する	header = None
オプションで、標準出力を使う	file = sys.stdout
データフレームdfをカラムcol毎にグループ化して、カラムcol2の合計を求める	df.groupby(col)[col2].sum()
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
カウンタaCounterのトータルカウント	aCounter.total()
xの角度	math.degrees(x)
データフレームdfから重複を削除する	df.drop_duplicates()
sのの中でパターンpatternにマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
sが全て英大文字か調べる	s.isupper()
辞書adictの全エントリをクリアする	adict.clear()
sをISO書式で日時に変換する	datetime.datetime.fromisoformat(s)
sをトリムする	s.strip()
リストxdataとリストydataについての散布図をアリスブルー色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='aliceblue', alpha=0.5)
リストalistの長さだけ繰り返す	range(len(alist))
データフレームdfが正規分布からどの程度、尖っているか見る	df.skew()
リストxdataとリストydataについての散布図にsという凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
データフレームdfのn行目を抽出する	df.loc[n]
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
sはタイトルケースか調べる	s.istitle()
現在の作業ディレクトリをfilenameに変更する	os.chdir(os.dirname(filename))
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
辞書adictを値を含めてコピーする	{k: copy.copy(v) for k, v in adict.items()}
データフレームdfの標本標準偏差	df.std()
グラフ中の縦軸の軸ラベルをsに設定する	plt.ylabel(s)
デックdeqのn番目からn2番目の部分要素	collections.deque(itertools.islice(deq, n, n2))
xの小数点以下'1'桁までを表示する	print(':.1f'.format(x))
データフレームdfの欠損値を最小値に設定する	df.fillna(df.min())
セットasetに文字列elementを追加する	aset.add(element)
グラフを使う	import matplotlib.pyplot as plt
リストxdataとリストydataについて折れ線グラフを描画して、その色をアリスブルーに設定する	plt.plot(xdata, ydata, color='aliceblue')
グラフ中に枠なしの凡例を入れる	plt.legend(frameon=False)
サイコロと同じ乱数を生成する	random.randint(1, 6)
sとs2は同じか調べる	s == s2
sのHEXから浮動小数点数に変換する	float.fromhex(s)
データフレームdfのカラムcolを配列に変換する	df[col].values
辞書adictをJSON形式でファイル出力foutに保存する	json.dump(adict, fout, ensure_ascii=False)
リストxdataとリストydataの折れ線グラフをカラーコードrgbで描画する	plt.plot(xdata, ydata, color=rgb)
日時dtの時刻	dt.time()
データ列dsを等量でn個にビン分割する	pd.qcut(ds, n)
nからn2の範囲	range(n, n2)
xの絶対値	abs(x)
リストxdataとリストydataの破線グラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dashed', color='b')
nが3で割り切れるか調べる	n % 3 == 0
散布図にアリスブルー色のマーカーを使う	plt.plot(xdata, ydata, c='aliceblue')
最大長をnにしてリストiterableから両端キューを作って、Xに代入する	X = collections.deque(iterable, maxlen=n)
表データを使う	import pandas as pd
データフレームdfとデータフレームdf2を縦方向に繋ぐ	pd.concat([df, df2])
リストalist中の最大値	max(alist)
itertoolsモジュールをインポートする	import itertools
リストiterableとリストiterable2をペアリングする	itertools.zip_longest(iterable, iterable2)
xを整数に変換する	int(x)
データフレームdfの欠損値を直前の値で埋める	df.fillna(method='ffill')
nが一桁の数か調べる	-9 <= n <= 9
セットasetにおけるセットaset2の補集合	aset.difference(aset2)
カウンタaCounter∩カウンタaCounter2	aCounter & aCounter2
n年n2月の日付	datetime.date(year=n, month=n2, day=1)
リストiterableを集合に変換する	set(iterable)
オブジェクトobjのバイトサイズを知る	sys.getsizeof(obj)
xの印字可能な文字列	ascii(x)
データフレームdfとデータフレームdf2を結合する	pd.merge(df, df2)
リストxdataについてのヒストグラムを描画する際にビン数をnに設定する	plt.hist(xdata, bins=n)
データフレームdfをカラムcolとカラムcol2の組み合わせ毎にグループ化して、合計	df.groupby([col, col2], as_index=False).sum()
エポックtimestampを日時に変換する	datetime.datetime.fromtimestamp(timestamp)
日時dtと日時dt2の時間差を秒数で求める	(dt - dt2).total_seconds()
データフレームdfのインデックスの名前をまとめて、sからs2に付け直す	df.rename(index={s: s2})
ベクトルxとx2のユークリッド距離	math.dist(x, x2)
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
乱数シードをnで初期化する	random.seed(n)
データフレームdfのカラムcolの曜日の名前	df[col].dt.weekday_name
0からn未満までの整数乱数を生成する	random.randrange(n)
綺麗なグラフを使う	import seaborn as sns
xを文字列型に変換する	str(x)
リストiterableの長さnの順列	itertools.permutations(iterable, n)
データフレームdfの各次元の大きさを見る	df.shape
xの小数部	math.modf(x)[0]
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
リストiterableからカウンタを新規に作る	collections.Counter(iterable)
リストalistの長さ	len(alist)
データフレームdfの最頻値の出現回数	df.freq()
ファイルfilenameを読み込みモードでオープンする]	open(filename, mode='r')
文字列element∈セットaset	element in aset
整数nのビット長	n.bit_length()
データフレームdfから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
データフレームdfのカラムcolが何年か見る	df[col].dt.year
JSONファイルのファイル入力finを読み込んで、dataとする	data = json.load(fin)
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
オプションで、改行コードをUNIXに設定する	newline = '\n'
リストxdataについてのヒストグラムを描画する際に半透明ににする	plt.hist(xdata, alpha=0.5)
データフレームdfから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
リストxdataとリストydataについて散布図を描画して、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
リストxdataとリストydataについて散布図を描画して、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
ISO書式のsを日時に変換する	datetime.datetime.fromisoformat(s)
データフレームdfを小数点以下n桁で丸める	df.round(n)
nをn2だけ増加させる	n += n2
ヒストグラムを半透明にする	plt.hist(xdata, alpha=0.5)
データフレームdfの平均値	df.mean()
折れ線グラフのポイントマーカーを黒くする	plt.plot(xdata, ydata, marker='.', markerfacecolor='k')
sの接頭辞がs2か調べる	s.startswith(s2)
リストalistに文字列elementを追加する	alist.append(element)
s名を持ち、リストalist3のプロパティを持った名前付きタプルを定義する	collections.namedtuple(s, names)
リストalistの末尾	alist[-1]
xをの小数点以下第一位で丸める	round(x, 1)
sはキーワードか調べる	keyword.iskeyword(s)
xとx2の両方にnを代入する	x = x2 = n
リストiterableのイミュータブルな集合	frozenset(iterable)
辞書adictをチェーンマップに変換する	collections.ChainMap(adict)
データフレームdfをカラムcol毎にグループ化して、カラムcol2の要約統計量を求める	df.groupby(col).describe()[col2]
データフレームdfを転置する	df.T
カウンタaCounterの項目一覧	aCounter.keys()
逆順のデックdeqを使う	reversed(deq)
リストalistにリストalist2を追加する	alist.extend(alist2)
辞書adictをインデント幅nのJSON形式の文字列に変換する	json.dumps(adict, ensure_ascii=False, indent=n)
sのs2をs3に全て置き換える	s.replace(s2, s3)
keyが辞書adictに存在しないとき、文字列elementを追加する	adict.setdefault(key, element)
文字コードnの文字	chr(n)
セットasetをイミュータブルに変換する	frozenset(aset)
sをs2で区切って文字列リストに変換する	s.split(s2)
クラスCが名前付きタプルか調べる	issubclass(C, tuple)
fを改行を取り除いて一行ずつ読み込む	f.readline()
長さnのリスト	[0] * n
データフレームdfのどの値が頻出か見る	df.mode()
Pandasで、__Y__を日付データに変換し、dfのインデックスにする	df.index = pd.to_datetime(df)
関数predicatefuncが真となるリストiterableの要素	itertools.dropwhile(predicatefunc, iterable)
リストiterableの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
データフレームdfからカテゴリデータのカラムの名前の一覧を使う	df.select_dtypes('object').columns
データフレームdfの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
数式として、eを部分分数に展開する	sympy.apart(e)
グラフで使うフォントをsに指定する	sns.set(font=s)
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
グラフ中の横軸にsという軸ラベルを付ける	plt.xlabel(s)
リストxdataを縦軸、リストydataを横軸と指定して、折れ線グラフを描画する	plt.plot(xdata, ydata)
リストxdataとリストydataの折れ線グラフをsとラベル付けして描画する	plt.plot(xdata, ydata, label=s)
xの指数	math.frexp(x)[1]
データフレームdfのカラムcolがx、かつカラムcol2がx2である行を抽出する	df[(df[col] == x) & (df[col2] == x2)]
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
CSVファイルTSVファイルfilenameをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データフレームdfのカラムcolがxより大きくx2より小さい行を抽出する	df[(x < df[col]) & (df[col] < x2)]
fからn文字、読み込む	f.read(n)
カウンタaCounterから低頻出項目をn個、リストとして使う	aCounter.most_common()[:-n-1:-1]
nからn2までの整数乱数を生成する	random.randint(n, n2)
nにn2を加える	n + n2
デックdeqの先頭から要素を取り除く	deq.popleft()
sを式として評価する	eval(s)
sの接尾辞からs2を取り除く	s.removesuffix(s2)
データフレームdfのカラムcolからユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
sをASCII限定のパターンpatternで分割する	re.split(pattern, s, flags=re.ASCI)
日時dtをn年前に戻す	dt - datetime.timedelta(years=n)
ファイルfilenameをUTF8で書き込み用にオープンする]	open(filename, mode='w', encoding='utf-8')
データフレームdfを100の位で丸めて、整数型にする	df.round(-2).astype(int)
xの小数点以下第n位で丸める	round(x, n)
本日の日時	datetime.datetime.today()
辞書adictの浅いコピーを行う	adict.copy()
データフレームdfをJSONLファイルfilenameに保存する	df.to_csv(filename)
データフレームdfのカラムcolが何曜日か見る	df[col].dt.weekday_name
nプラスn2	n + n2
リストxdataとリストydataについての散布図にカラーコードrgbのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
xをx2で割った余り	x % x2
sの両端から改行を取り除く	s.strip('\n')
データフレームdfのカラムcolがx以上かつx2未満の行を抽出する	df[(x <= df[col]) & (df[col] < x2)]
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
データフレームdfから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
日時dtををn日後に進める	dt + datetime.timedelta(days=n)
nまでの偶整数列	list(range(2, n, 2))
sを出現したパターンpatternで分割する	re.split(pattern, s)
ファイルfilenameが存在しないか調べる	not os.path.exists(filename)
セットasetからエラーなく文字列elementを取り除く	aset.discard(element)
空のリスト	[]
xとx2の両方をnに設定する	x = x2 = n
リストiterableから両端キューを新しく作って、Xに代入する	X = collections.deque(iterable)
アリスブルー色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='aliceblue')
浮動小数点数の最小値	sys.float_info.min
sを最後のs2で分けたときの後半の文字列	s.rpartition(s2)[-1]
ユーザの入力を整数として受け取る	int(input())
最適な位置に凡例を入れる	plt.legend(loc='best')
グラフを描画する	import matplotlib.pyplot as plt
sのn以降にs2が含まれるか調べる	s.find(s2, start=n) != -1
sの長さ	len(s)
改行なしにsを表示する	print(s, end='')
x,x2,x3にそれぞれn,n2,n3を代入する	x, x2, x3 = n, n2, n3
nが正の数か調べる	n > 0
データフレームdfをJSONLファイルfilenameに保存する	df.to_csv(filename, sep='\t')
辞書adictのエントリ数	len(adict)
エクセルファイルファイルfilenameからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
リストiterableをsで連結する	s.join(map(str, iterable))
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=n2, byteorder='big', signed=True)
データ列dsのユニークな値	ds.unique()
日時dtをタプルに変換する	dt.timetuple()
インデント幅nで、辞書adictをJSON形式の文字列に変換する	json.dumps(adict, ensure_ascii=False, indent=n)
セットasetを空にする	aset.clear()
alistn番目から要素をポップする	alist.pop(n)
リストalistから文字列elementを取り除く	alist.remove(element)
セットasetがセットaset2の部分集合か調べる	aset.issubset(aset2)
Pandasで、データフレームdfのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
xの双曲線余弦	math.cosh(x)
sの文字リスト	list(s)
データフレームdfとデータフレームdf2をカラムcolをキーにして外部結合する	pd.merge(df, df2, on=col, how='outer')
リストalistの合計値	sum(alist)
オプションで、標準出力に出力する	file = sys.stdout
sの片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームdfを10の位で丸める	df.round(-1)
データフレームdf中にいくつ欠損値があるか数える	df.isna().sum()
日時dtの分数	dt.minite
カウンタaCounter内の文字列element項目を増やす	aCounter[element] += 1
データフレームdfのカラムcolがsで始まらない行を抽出する	df[not df[col].str.startswith(s)]
数式として、eを因数分解する	sympy.factor(e)
nとn2の論理和	n | n2
散布図にポイントマーカーを使う	plt.plot(xdata, ydata, marker='.')
浮動小数点数の最大値	sys.float_info.max
グラフのパレットをsに設定する	sns.set(palette=s)
sの先頭でパターンpatternにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
異なるn個のものからn2個選ぶ場合の数	math.comb(n, n2)
プラットフォームの符号付きの最大整数値	sys.maxsize
sの右側からs2を取り除く	s.rstrip(s2)
カウンタaCounterのユニークな項目を列挙する	list(aCounter)
xのx2乗	pow(x, x2)
リストalistが空か調べる	len(alist) == 0
データフレームdfのカラムcolが何分か見る	df[col].dt.minute
タブ	'\t'
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
リストalistの文字列elementが最初に見つかるインデックス	alist.index(element)
n年n2月を日時に変換する	datetime.datetime(year=n, month=n2, day=1)
fから1文字、読み込む	f.read(1)
リストalistのn番目以降の部分を取り出す	alist[n:]
データ列dsを等量でビン数nでビン分割する	pd.qcut(ds, n)
nまでの奇整数列	list(range(1, n, 2))
sの中からパターンpatternにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
デックdeqの先頭に文字列elementを追加する	deq.appendleft(element)
数式として、eをzについてn階微分する	sympy.diff(e, z, n)
文字列elementがセットasetに含まれないか調べる	element not in aset
データフレームdfのの中で、カラムcolとカラムcol2の重複を削除する	df.drop_duplicates(subset=[col, col2])
データ列をインポートする	import pandas as pd
折れ線グラフの透明度をxに設定する	plt.plot(xdata, ydata, alpha=x)
sを末尾から空白で区切る	s.rsplit()
データフレームdfの欠損値を最大値で埋める	df.fillna(df.max())
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
データフレームdfのカラムcolが何日か見る	df[col].dt.day
最大長nの両端キューを新しく作る	X = collections.deque(maxlen=n)
数式として、eの簡略化を行う	sympy.sympify(e)
xとx2の斜辺	math.hypot(x, x2)
日時dtと日時dt2の時間差が何秒か知る	(dt - dt2).total_seconds()
リストalistをnからナンバリングする	enumerate(alist, start=n)
sを改行で区切る	s.splitlines()
rangeの無限バージョン	itertools.count(start=n, step=n2)
xの双曲線正接の逆数	math.atanh(x)
正規表現をインポートする	import re
データフレームdfがどの程度、分散しているか見る	df.var()
sを表示する	print(s)
sの接尾辞がs2か調べる	s.endswith(s2)
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
1+xの自然対数	math.log1p(x)
ユーザから入力される	int(input())
日時dtと日時dt2の時間差が何分か知る	(dt - dt2).total_seconds()//60
セットasetからセットaset2を引いた差集合	aset.difference(aset2)
nわるn2	n / n2
リストiterableを累加したイテラブル	itertools.accumulate(iterable)
リストiterableのそれぞれを関数funcでフィルタする	filter(func, iterable)
リストalistを複製する	alist.copy()
日時dtと日時dt2の時間差	dt - dt2
データフレームdfのカラムcolがxより大きい行を抽出する	df[df[col] > x]
数式として、eを簡単にする	sympy.sympify(e)
sを最後のs2で二分し、、後半の文字列を使う	s.rpartition(s2)[-1]
入力から1行読み取る	input()
データフレームdfをCSVファイルでJSONLファイルfilenameに保存する	df.to_csv(filename)
sが全て空白文字からなるか調べる	s.isspace()
データフレームdfのカラムcolを配列として抽出する	df[col].values
リストiterableをダミー変数に変換する	pd.get_dummies(iterable)
エクセルファイルファイルfilenameからエクセルファイルを読み込む	pd.read_excel(filename)
平均x、標準偏差x2の正規分布で疑似乱数を生成する	random.normalvariate(x, x2)
プラットフォームのユニコードの最大コードポイント	sys.maxunicode
データフレームdfのインデックスをリセットする	df.reset_index()
x、x2、x3の最大値	max(x, x2, x3)
オブジェクトobjをデバッグ向けの文字列に変換する	repr(obj)
時間を使う	import time
辞書adictのkeyに対応した値	adict.get(key)
真	True
グラフ中の縦軸にsという軸ラベルを付ける	plt.ylabel(s)
sの英大文字と英小文字を交換する	s.swapcase()
sがs2と同じか比較する	s == s2
nの順列の総数	math.perm(n)
データフレームdfのカラムcolがx以上の行を抽出する	df[df[col] >= x]
日時dtが何日か知る	dt.day
リストxdataとリストydataについて散布図を描画して、マーカーの色をアリスブルーに設定する	plt.plot(xdata, ydata, c='aliceblue')
sのタブ文字をn個の空白に置き換える	s.expandtabs(tabsize=n)
リストxdataとリストydataの赤い折れ線グラフを描画する	plt.plot(xdata, ydata, color='r')
辞書adictをソートしてJSON形式の文字列に変換する	json.dumps(adict, ensure_ascii=False, sort_keys=True)
最初のコマンド引数を得る	sys.argv[1]
nの約数を列挙する	"[i for i in range(1, int(n**0.5)+1) if n % i == 0] + [n//i for i in range(1,
                                                                          int(n**0.5)+1) if n % i == 0 and i != n // i].reverse()"
nが5で割り切れるか調べる	n % 5 == 0
数式として、eの数値を求める	float(e)
データフレームdfを配列に変換する	df.values
nの三乗	n ** 3
リストxdataとリストydataの折れ線グラフを描画して、色をsに設定する	plt.plot(xdata, ydata, color=s)
リストalistをナンバリングする	enumerate(alist)
リストiterableの各要素に対して、関数predicatefuncが真であれば、その要素を出力する	itertools.takewhile(predicatefunc, iterable)
リストalist内の要素が全て真か調べる	all(alist)
日時dtにn日分、加算する	dt + datetime.timedelta(days=n)
JSONLファイルfilenameからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
コマンドの第一引数を得る	sys.argv[1]
セットaset⊆セットaset2	aset.issubset(aset2)
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
整数nを二進表現に変換する	bin(n)
散布図に黒いポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='k')
日時dtの日数	dt.day
ふたつの辞書を合体する	adict | adict2
辞書adictと辞書adict2を合体する	adict | adict2
ファイルfilenameからストリームを読み込み、fileとする	file = open(filename)
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
データフレームdfの重複した行をマスクする	df.duplicated()
折れ線グラフの色をカラーコードrgbに設定する	plt.plot(xdata, ydata, color=rgb)
n2分のn	n / n2
seabornのデフォルトを適用する	sns.set()
n割るn2を切り上げる	(n + n2 - 1) // n2
オプションで、エンコーディングをUTF8に設定する	encoding = 'utf-8'
文字列TSVファイルfilenameからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
全ての数字	string.digits
日付を使う	import datetime
sの中からs2を探す	s.find(s2)
オプションで、読み込む行番号をnamesで指定する	usecols = names
数式として、eのzにnを代入する	e.subs(z, n)
cから辞書adictを引く	aCounter.subtract(adict)
データフレームdfのカラムcolのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
データ列dsを中央値でビン分割する	pd.qcut(ds, 2)
データフレームdfのカラムcolとカラムcol2を折れ線グラフで描画する	plt.plot(df[col], df[col2])
nからn2までのn3ごとによるスライス	slice(n, n2, n3)
n進sを整数に変換する	int(s, n)
